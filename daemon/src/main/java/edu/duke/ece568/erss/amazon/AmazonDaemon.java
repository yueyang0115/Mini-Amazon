/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece568.erss.amazon;

import edu.duke.ece568.erss.amazon.WorldAmazonProtocol.*;

import java.io.*;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

import static edu.duke.ece568.erss.amazon.Utils.recvMsgFrom;
import static edu.duke.ece568.erss.amazon.Utils.sendMsgTo;

/**
 * packageid is the same as shipid, and this is created when we send the APack
 */
public class AmazonDaemon {
    private static final String HOST = "vcm-13663.vm.duke.edu";
    private static final int PORT = 23456;

    // NOTE!!! the world simulator use only one socket to communicate with us
    // i.e. the server expect to receive a AConnect from each new connection
    private Socket socket;
    private InputStream in;
    private OutputStream out;
    private long seqNum;

    public AmazonDaemon() throws IOException {
        this.seqNum = 0;
        socket = new Socket(HOST, PORT);
        in = socket.getInputStream();
        out = socket.getOutputStream();
    }

    public boolean connectToWorld(long worldID) {
        AInitWarehouse.Builder builder = AInitWarehouse.newBuilder();
        builder.setId(1);
        builder.setX(2);
        builder.setY(2);

        AConnect.Builder connect =  AConnect.newBuilder();
        connect.setIsAmazon(true);
        connect.addInitwh(builder);
        if (worldID >= 0){
            connect.setWorldid(worldID);
        }

        AConnected.Builder connected = AConnected.newBuilder();

        sendMsgTo(connect.build(), out);
        recvMsgFrom(connected, in);

        System.out.println("world id: " + connected.getWorldid());
        System.out.println("result: " + connected.getResult());

        return connected.getResult().equals("connected!");
    }

    public void purchaseMore(List<AProduct> products) {
        ACommands.Builder command = ACommands.newBuilder();

        APurchaseMore.Builder purchase = APurchaseMore.newBuilder();
        purchase.addAllThings(products);
        purchase.setSeqnum(seqNum);
        purchase.setWhnum(1);
        command.addBuy(purchase);

//        Socket socket = new Socket(HOST, PORT);
//        InputStream in = socket.getInputStream();
//        OutputStream out = socket.getOutputStream();

        AResponses.Builder responses = AResponses.newBuilder();

        sendMsgTo(command.build(), out);
        recvMsgFrom(responses, in);
        System.out.println(responses.toString());

        // TODO: maybe you want to check the error status
        if (responses.getErrorCount() == 0){
            seqNum++;
        }

        if (responses.getAcksCount() > 0){
            System.out.println("ack: " + responses.getAcks(0));
        }

        // send back ack
        List<Long> seqs = new ArrayList<>();
        for (APurchaseMore purchaseMore : responses.getArrivedList()){
            seqs.add(purchaseMore.getSeqnum());
        }
        sendAck(seqs);
    }

    public void pack(List<AProduct> products){
        ACommands.Builder command = ACommands.newBuilder();

        APack.Builder pack = APack.newBuilder();
        pack.addAllThings(products);
        pack.setSeqnum(seqNum);
        pack.setWhnum(1);
        pack.setShipid(1); // equal to package id
        command.addTopack(pack);

        AResponses.Builder responses = AResponses.newBuilder();

        sendMsgTo(command.build(), out);
        recvMsgFrom(responses, in);
        System.out.println(responses.toString());

        if (responses.getReadyCount() == 0){
            // only receive ack, need another receive to receive ready list
            responses.clear();
            recvMsgFrom(responses, in);
            System.out.println(responses.toString());
        }
        // receive the ready list
        seqNum++;

        List<Long> seqs = new ArrayList<>();
        for (APacked packed : responses.getReadyList()){
            seqs.add(packed.getSeqnum());
        }
        sendAck(seqs);
    }

    public void load(int truckID){
        ACommands.Builder command = ACommands.newBuilder();

        APutOnTruck.Builder load = APutOnTruck.newBuilder();
        load.setWhnum(1);
        load.setTruckid(truckID);
        load.setShipid(1);
        load.setSeqnum(seqNum);
        command.addLoad(load);

        AResponses.Builder responses = AResponses.newBuilder();

        sendMsgTo(command.build(), out);
        recvMsgFrom(responses, in);
        System.out.println(responses.toString());

        if (responses.getLoadedCount() == 0){
            responses.clear();
            recvMsgFrom(responses, in);
            System.out.println(responses.toString());
        }
        seqNum++;

        List<Long> seqs = new ArrayList<>();
        for (ALoaded loaded : responses.getLoadedList()){
            seqs.add(loaded.getSeqnum());
        }
        sendAck(seqs);
    }

    public void query(int packageID){
        System.out.println("");
        System.out.println("start querying");
        ACommands.Builder command = ACommands.newBuilder();

        AQuery.Builder query = AQuery.newBuilder();
        query.setPackageid(packageID);
        query.setSeqnum(seqNum);
        command.addQueries(query);

        AResponses.Builder responses = AResponses.newBuilder();

        sendMsgTo(command.build(), out);
        recvMsgFrom(responses, in);
        System.out.println(responses.toString());

        if (responses.getPackagestatusCount() == 0){
            responses.clear();
            recvMsgFrom(responses, in);
            System.out.println(responses.toString());
        }
        seqNum++;

        List<Long> seqs = new ArrayList<>();
        for (APackage p : responses.getPackagestatusList()){
            seqs.add(p.getSeqnum());
            System.out.println(p.getStatus());
        }
        sendAck(seqs);

        System.out.println("finish querying");
        System.out.println("");
    }

    public void disconnect(){
        ACommands.Builder command = ACommands.newBuilder();
        command.setDisconnect(true);

        AResponses.Builder responses = AResponses.newBuilder();

        sendMsgTo(command.build(), out);
        recvMsgFrom(responses, in);
        System.out.println(responses.toString());

        if (responses.hasFinished()){
            System.out.println("amazon disconnect finish");
        }
        seqNum++;
    }


    /**
     * Send the ack of a list of sequence number.
     * @param seqs all sequence numbers you want to confirm
     */
    void sendAck(List<Long> seqs){
        ACommands.Builder commands = ACommands.newBuilder();
        for (long seq : seqs){
            commands.addAcks(seq);
        }
        sendMsgTo(commands.build(), out);
    }

    public static void main(String[] args) throws Exception {
        AmazonDaemon amazonDaemon = new AmazonDaemon();
        MockUPS ups = new MockUPS();

        if (!ups.connectToWorld(-1)){
            System.err.println("Cannot connect to the world, check your config.");
            return;
        }

        if (!amazonDaemon.connectToWorld(ups.worldID)){
            System.err.println("Cannot connect to the world, check your config.");
            return;
        }

        System.out.println("both connect to the world");

        List<AProduct> products = new ArrayList<>();
        // buy something
        products.add(AProduct.newBuilder().setId(1).setCount(2).setDescription("apple").build());
        products.add(AProduct.newBuilder().setId(2).setCount(3).setDescription("orange").build());
        products.add(AProduct.newBuilder().setId(3).setCount(4).setDescription("banana").build());
        amazonDaemon.purchaseMore(products);
        System.out.println("amazon finish buying stuff");

        amazonDaemon.pack(products);
        System.out.println("amazon finish packing stuff");
        amazonDaemon.query(1);

        ups.pick(1);
        System.out.println("ups finish moving truck");
        amazonDaemon.query(1);

        amazonDaemon.load(1);
        System.out.println("amazon finish loading stuff");

        amazonDaemon.query(1);
        ups.delivery(5, 5, 1);
        System.out.println("ups finish delivery stuff");

        amazonDaemon.query(1);

        amazonDaemon.disconnect();
        ups.disconnect();
    }
}
